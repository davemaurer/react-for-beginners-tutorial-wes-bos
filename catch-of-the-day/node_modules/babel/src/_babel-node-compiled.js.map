{"version":3,"sources":["_babel-node.js"],"names":[],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;IACY,K;;AACZ;;;;AACA;;;;;;;;AAEA,IAAI,UAAU,IAAI,oBAAU,OAAd,CAAsB,YAAtB,CAAd;;AAEA,QAAQ,MAAR,CAAe,qBAAf,EAAsC,iBAAtC;AACA,QAAQ,MAAR,CAAe,oBAAf,EAAqC,kCAArC;AACA,QAAQ,MAAR,CAAe,sBAAf,EAAuC,oEAAvC;AACA,QAAQ,MAAR,CAAe,+BAAf,EAAgD,qDAAhD;AACA,QAAQ,MAAR,CAAe,qBAAf,EAAsC,+CAAtC;AACA,QAAQ,MAAR,CAAe,6BAAf,EAA8C,0DAA9C,EAA0G,gBAAK,IAA/G;AACA,QAAQ,MAAR,CAAe,6BAAf,EAA8C,yDAA9C,EAAyG,gBAAK,IAA9G;AACA,QAAQ,MAAR,CAAe,2BAAf,EAA4C,4DAA5C,EAA0G,gBAAK,IAA/G;;AAEA,IAAI,MAAM,QAAQ,iBAAR,CAAV;AACA,QAAQ,OAAR,CAAgB,IAAI,OAApB;AACA,QAAQ,KAAR,CAAc,iDAAd;AACA,QAAQ,KAAR,CAAc,QAAQ,IAAtB;;AAEA;;AAEA,MAAM,QAAN,CAAe;AACb,cAAc,QAAQ,UADT;AAEb,aAAc,QAAQ,SAFT;AAGb,aAAc,QAAQ,SAHT;AAIb,YAAc,QAAQ,QAJT;AAKb,UAAc,QAAQ,MALT;AAMb,SAAc,QAAQ;AANT,CAAf;;AASA;;AAEA,IAAI,QAAQ,SAAR,KAAQ,CAAU,IAAV,EAAgB,QAAhB,EAA0B;AACpC,SAAO,KAAK,IAAL,EAAP;AACA,MAAI,CAAC,IAAL,EAAW,OAAO,SAAP;;AAEX,SAAO,MAAM,SAAN,CAAgB,IAAhB,EAAsB;AAC3B,cAAU,QADiB;AAE3B,eAAW,QAAQ,SAFQ;AAG3B,eAAW,QAAQ,SAHQ;AAI3B,cAAU,QAAQ,QAJS;AAK3B,WAAO,QAAQ;AALY,GAAtB,EAMJ,IANH;;AAQA,SAAO,aAAG,gBAAH,CAAoB,IAApB,EAA0B;AAC/B,cAAU;AADqB,GAA1B,CAAP;AAGD,CAfD;;AAiBA,IAAI,QAAQ,IAAR,IAAgB,QAAQ,KAA5B,EAAmC;AACjC,MAAI,OAAO,QAAQ,IAAnB;AACA,MAAI,CAAC,IAAD,IAAS,SAAS,IAAtB,EAA4B,OAAO,QAAQ,KAAf;;AAE5B,SAAO,UAAP,GAAoB,QAApB;AACA,SAAO,SAAP,GAAmB,QAAQ,GAAR,EAAnB;;AAEA,MAAI,UAAS,qBAAW,OAAO,UAAlB,CAAb;AACA,UAAO,QAAP,GAAkB,OAAO,UAAzB;AACA,UAAO,KAAP,GAAkB,iBAAO,gBAAP,CAAwB,OAAO,SAA/B,CAAlB;;AAEA,SAAO,OAAP,GAAiB,QAAO,OAAxB;AACA,SAAO,MAAP,GAAiB,OAAjB;AACA,SAAO,OAAP,GAAiB,QAAO,OAAP,CAAe,IAAf,CAAoB,OAApB,CAAjB;;AAEA,MAAI,SAAS,MAAM,IAAN,EAAY,OAAO,UAAnB,CAAb;AACA,MAAI,QAAQ,KAAZ,EAAmB;AACjB,QAAI,SAAS,iBAAE,QAAF,CAAW,MAAX,IAAqB,MAArB,GAA8B,mBAAQ,MAAR,CAA3C;AACA,YAAQ,MAAR,CAAe,KAAf,CAAqB,SAAS,IAA9B;AACD;AACF,CApBD,MAoBO;AACL,MAAI,QAAQ,IAAR,CAAa,MAAjB,EAAyB;AACvB;AACA,QAAI,OAAO,QAAQ,IAAR,CAAa,KAAb,CAAmB,CAAnB,CAAX;;AAEA,QAAI,IAAI,CAAR;AACA,QAAI,aAAa,KAAjB;AACA,qBAAE,IAAF,CAAO,IAAP,EAAa,UAAU,GAAV,EAAe,EAAf,EAAmB;AAC9B,UAAI,UAAJ,EAAgB;AACd,qBAAa,KAAb;AACA;AACD;;AAED,UAAI,IAAI,CAAJ,MAAW,GAAf,EAAoB;AAClB,YAAI,YAAY,QAAQ,IAAI,KAAJ,CAAU,CAAV,CAAR,CAAhB;AACA,YAAI,aAAa,cAAc,IAA/B,EAAqC;AACnC,uBAAa,IAAb;AACD;AACF,OALD,MAKO;AACL,YAAI,EAAJ;AACA,eAAO,KAAP;AACD;AACF,KAfD;AAgBA,WAAO,KAAK,KAAL,CAAW,CAAX,CAAP;;AAEA;AACA,QAAI,WAAW,KAAK,CAAL,CAAf;AACA,QAAI,CAAC,8BAAe,QAAf,CAAL,EAA+B,KAAK,CAAL,IAAU,eAAK,IAAL,CAAU,QAAQ,GAAR,EAAV,EAAyB,QAAzB,CAAV;;AAE/B;AACA,YAAQ,IAAR,GAAe,CAAC,MAAD,EAAS,MAAT,CAAgB,IAAhB,CAAf;AACA,YAAQ,QAAR,CAAiB,OAAjB,CAAyB,UAAzB;;AAEA,qBAAO,OAAP;AACD,GAjCD,MAiCO;AACL;AACD;AACF;;AAED,SAAS,SAAT,GAAqB;AACnB,iBAAK,KAAL,CAAW;AACT,YAAQ,IADC;AAET,WAAO,QAAQ,KAFN;AAGT,YAAQ,QAAQ,MAHP;AAIT,UAAM,QAJG;AAKT,eAAW;AALF,GAAX;AAOD;;AAED,SAAS,QAAT,CAAkB,IAAlB,EAAwB,OAAxB,EAAiC,QAAjC,EAA2C,QAA3C,EAAqD;AACnD,MAAI,GAAJ;AACA,MAAI,MAAJ;;AAEA,MAAI;AACF,QAAI,KAAK,CAAL,MAAY,GAAZ,IAAmB,KAAK,KAAK,MAAL,GAAc,CAAnB,MAA0B,GAAjD,EAAsD;AACpD,aAAO,KAAK,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP,CADoD,CAC1B;AAC3B;;AAED,aAAS,MAAM,IAAN,EAAY,QAAZ,CAAT;AACD,GAND,CAME,OAAO,CAAP,EAAU;AACV,UAAM,CAAN;AACD;;AAED,WAAS,GAAT,EAAc,MAAd;AACD","file":"_babel-node-compiled.js","sourcesContent":["import pathIsAbsolute from \"path-is-absolute\";\nimport commander from \"commander\";\nimport Module from \"module\";\nimport { inspect } from \"util\";\nimport path from \"path\";\nimport repl from \"repl\";\nimport { util } from \"babel-core\";\nimport * as babel from \"babel-core\";\nimport vm from \"vm\";\nimport _ from \"lodash\";\n\nvar program = new commander.Command(\"babel-node\");\n\nprogram.option(\"-e, --eval [script]\", \"Evaluate script\");\nprogram.option(\"-p, --print [code]\", \"Evaluate script and print result\");\nprogram.option(\"-i, --ignore [regex]\", \"Ignore all files that match this regex when using the require hook\");\nprogram.option(\"-x, --extensions [extensions]\", \"List of extensions to hook into [.es6,.js,.es,.jsx]\");\nprogram.option(\"-r, --stage [stage]\", \"Enable support for specific ECMAScript stages\");\nprogram.option(\"-w, --whitelist [whitelist]\", \"Whitelist of transformers separated by comma to ONLY use\", util.list);\nprogram.option(\"-b, --blacklist [blacklist]\", \"Blacklist of transformers separated by comma to NOT use\", util.list);\nprogram.option(\"-o, --optional [optional]\", \"List of optional transformers separated by comma to enable\", util.list);\n\nvar pkg = require(\"../package.json\");\nprogram.version(pkg.version);\nprogram.usage(\"[options] [ -e script | script.js ] [arguments]\");\nprogram.parse(process.argv);\n\n//\n\nbabel.register({\n  extensions:   program.extensions,\n  blacklist:    program.blacklist,\n  whitelist:    program.whitelist,\n  optional:     program.optional,\n  ignore:       program.ignore,\n  stage:        program.stage,\n});\n\n//\n\nvar _eval = function (code, filename) {\n  code = code.trim();\n  if (!code) return undefined;\n\n  code = babel.transform(code, {\n    filename: filename,\n    blacklist: program.blacklist,\n    whitelist: program.whitelist,\n    optional: program.optional,\n    stage: program.stage\n  }).code;\n\n  return vm.runInThisContext(code, {\n    filename: filename\n  });\n};\n\nif (program.eval || program.print) {\n  var code = program.eval;\n  if (!code || code === true) code = program.print;\n\n  global.__filename = \"[eval]\";\n  global.__dirname = process.cwd();\n\n  var module = new Module(global.__filename);\n  module.filename = global.__filename;\n  module.paths    = Module._nodeModulePaths(global.__dirname);\n\n  global.exports = module.exports;\n  global.module  = module;\n  global.require = module.require.bind(module);\n\n  var result = _eval(code, global.__filename);\n  if (program.print) {\n    var output = _.isString(result) ? result : inspect(result);\n    process.stdout.write(output + \"\\n\");\n  }\n} else {\n  if (program.args.length) {\n    // slice all arguments up to the first filename since they're babel args that we handle\n    var args = process.argv.slice(2);\n\n    var i = 0;\n    var ignoreNext = false;\n    _.each(args, function (arg, i2) {\n      if (ignoreNext) {\n        ignoreNext = false;\n        return;\n      }\n\n      if (arg[0] === \"-\") {\n        var parsedArg = program[arg.slice(2)];\n        if (parsedArg && parsedArg !== true) {\n          ignoreNext = true;\n        }\n      } else {\n        i = i2;\n        return false;\n      }\n    });\n    args = args.slice(i);\n\n    // make the filename absolute\n    var filename = args[0];\n    if (!pathIsAbsolute(filename)) args[0] = path.join(process.cwd(), filename);\n\n    // add back on node and concat the sliced args\n    process.argv = [\"node\"].concat(args);\n    process.execArgv.unshift(__filename);\n\n    Module.runMain();\n  } else {\n    replStart();\n  }\n}\n\nfunction replStart() {\n  repl.start({\n    prompt: \"> \",\n    input: process.stdin,\n    output: process.stdout,\n    eval: replEval,\n    useGlobal: true\n  });\n}\n\nfunction replEval(code, context, filename, callback) {\n  var err;\n  var result;\n\n  try {\n    if (code[0] === \"(\" && code[code.length - 1] === \")\") {\n      code = code.slice(1, -1); // remove \"(\" and \")\"\n    }\n\n    result = _eval(code, filename);\n  } catch (e) {\n    err = e;\n  }\n\n  callback(err, result);\n}\n"]}