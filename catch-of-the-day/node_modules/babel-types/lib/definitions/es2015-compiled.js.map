{"version":3,"sources":["es2015.js"],"names":[],"mappings":"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","file":"es2015-compiled.js","sourcesContent":["\"use strict\";\n\nvar _index = require(\"./index\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index2.default)(\"AssignmentPattern\", {\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Pattern\", \"LVal\"],\n  fields: {\n    left: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    },\n    right: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    },\n    decorators: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"Decorator\")))\n    }\n  }\n}); /* eslint max-len: 0 */\n\n(0, _index2.default)(\"ArrayPattern\", {\n  visitor: [\"elements\", \"typeAnnotation\"],\n  aliases: [\"Pattern\", \"LVal\"],\n  fields: {\n    elements: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"Expression\")))\n    },\n    decorators: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"ArrowFunctionExpression\", {\n  builder: [\"params\", \"body\", \"async\"],\n  visitor: [\"params\", \"body\", \"returnType\"],\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Expression\", \"Pureish\"],\n  fields: {\n    params: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"LVal\")))\n    },\n    body: {\n      validate: (0, _index.assertNodeType)(\"BlockStatement\", \"Expression\")\n    },\n    async: {\n      validate: (0, _index.assertValueType)(\"boolean\"),\n      default: false\n    }\n  }\n});\n\n(0, _index2.default)(\"ClassBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"ClassMethod\", \"ClassProperty\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"ClassDeclaration\", {\n  builder: [\"id\", \"superClass\", \"body\", \"decorators\"],\n  visitor: [\"id\", \"body\", \"superClass\", \"mixins\", \"typeParameters\", \"superTypeParameters\", \"implements\", \"decorators\"],\n  aliases: [\"Scopable\", \"Class\", \"Statement\", \"Declaration\", \"Pureish\"],\n  fields: {\n    id: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    },\n    body: {\n      validate: (0, _index.assertNodeType)(\"ClassBody\")\n    },\n    superClass: {\n      optional: true,\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    },\n    decorators: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"ClassExpression\", {\n  inherits: \"ClassDeclaration\",\n  aliases: [\"Scopable\", \"Class\", \"Expression\", \"Pureish\"],\n  fields: {\n    id: {\n      optional: true,\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    },\n    body: {\n      validate: (0, _index.assertNodeType)(\"ClassBody\")\n    },\n    superClass: {\n      optional: true,\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    },\n    decorators: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"ExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    source: {\n      validate: (0, _index.assertNodeType)(\"StringLiteral\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ExportDefaultDeclaration\", {\n  visitor: [\"declaration\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    declaration: {\n      validate: (0, _index.assertNodeType)(\"FunctionDeclaration\", \"ClassDeclaration\", \"Expression\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ExportNamedDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    declaration: {\n      validate: (0, _index.assertNodeType)(\"Declaration\"),\n      optional: true\n    },\n    specifiers: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"ExportSpecifier\")))\n    },\n    source: {\n      validate: (0, _index.assertNodeType)(\"StringLiteral\"),\n      optional: true\n    }\n  }\n});\n\n(0, _index2.default)(\"ExportSpecifier\", {\n  visitor: [\"local\", \"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    },\n    exported: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ForOfStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\", \"ForXStatement\"],\n  fields: {\n    left: {\n      validate: (0, _index.assertNodeType)(\"VariableDeclaration\", \"LVal\")\n    },\n    right: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index.assertNodeType)(\"Statement\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ImportDeclaration\", {\n  visitor: [\"specifiers\", \"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\"],\n  fields: {\n    specifiers: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"ImportSpecifier\", \"ImportDefaultSpecifier\", \"ImportNamespaceSpecifier\")))\n    },\n    source: {\n      validate: (0, _index.assertNodeType)(\"StringLiteral\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ImportDefaultSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ImportNamespaceSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ImportSpecifier\", {\n  visitor: [\"local\", \"imported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    },\n    imported: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n\n(0, _index2.default)(\"MetaProperty\", {\n  visitor: [\"meta\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    // todo: limit to new.target\n    meta: {\n      validate: (0, _index.assertValueType)(\"string\")\n    },\n    property: {\n      validate: (0, _index.assertValueType)(\"string\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ClassMethod\", {\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\"],\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"static\"],\n  visitor: [\"key\", \"params\", \"body\", \"decorators\", \"returnType\", \"typeParameters\"],\n  fields: {\n    kind: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"string\"), (0, _index.assertOneOf)(\"get\", \"set\", \"method\", \"constructor\")),\n      default: \"method\"\n    },\n    computed: {\n      default: false,\n      validate: (0, _index.assertValueType)(\"boolean\")\n    },\n    static: {\n      default: false,\n      validate: (0, _index.assertValueType)(\"boolean\")\n    },\n    key: {\n      validate: function validate(node, key, val) {\n        var expectedTypes = node.computed ? [\"Expression\"] : [\"Identifier\", \"StringLiteral\", \"NumericLiteral\"];\n        _index.assertNodeType.apply(undefined, expectedTypes)(node, key, val);\n      }\n    },\n    params: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"LVal\")))\n    },\n    body: {\n      validate: (0, _index.assertNodeType)(\"BlockStatement\")\n    },\n    generator: {\n      default: false,\n      validate: (0, _index.assertValueType)(\"boolean\")\n    },\n    async: {\n      default: false,\n      validate: (0, _index.assertValueType)(\"boolean\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ObjectPattern\", {\n  visitor: [\"properties\", \"typeAnnotation\"],\n  aliases: [\"Pattern\", \"LVal\"],\n  fields: {\n    properties: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"RestProperty\", \"Property\")))\n    },\n    decorators: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"SpreadElement\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  fields: {\n    argument: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    }\n  }\n});\n\n(0, _index2.default)(\"Super\", {\n  aliases: [\"Expression\"]\n});\n\n(0, _index2.default)(\"TaggedTemplateExpression\", {\n  visitor: [\"tag\", \"quasi\"],\n  aliases: [\"Expression\"],\n  fields: {\n    tag: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    },\n    quasi: {\n      validate: (0, _index.assertNodeType)(\"TemplateLiteral\")\n    }\n  }\n});\n\n(0, _index2.default)(\"TemplateElement\", {\n  builder: [\"value\", \"tail\"],\n  fields: {\n    value: {\n      // todo: flatten `raw` into main node\n    },\n    tail: {\n      validate: (0, _index.assertValueType)(\"boolean\"),\n      default: false\n    }\n  }\n});\n\n(0, _index2.default)(\"TemplateLiteral\", {\n  visitor: [\"quasis\", \"expressions\"],\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    quasis: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"TemplateElement\")))\n    },\n    expressions: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"Expression\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"YieldExpression\", {\n  builder: [\"argument\", \"delegate\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    delegate: {\n      validate: (0, _index.assertValueType)(\"boolean\"),\n      default: false\n    },\n    argument: {\n      optional: true,\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    }\n  }\n});"]}