{"version":3,"sources":["flow.js"],"names":[],"mappings":"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","file":"flow-compiled.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.createUnionTypeAnnotation = createUnionTypeAnnotation;\nexports.removeTypeDuplicates = removeTypeDuplicates;\nexports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;\n\nvar _index = require(\"./index\");\n\nvar t = _interopRequireWildcard(_index);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * Takes an array of `types` and flattens them, removing duplicates and\n * returns a `UnionTypeAnnotation` node containg them.\n */\n\nfunction createUnionTypeAnnotation(types) {\n  var flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0];\n  } else {\n    return t.unionTypeAnnotation(flattened);\n  }\n}\n\n/**\n * Dedupe type annotations.\n */\n\nfunction removeTypeDuplicates(nodes) {\n  var generics = {};\n  var bases = {};\n\n  // store union type groups to circular references\n  var typeGroups = [];\n\n  var types = [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    if (!node) continue;\n\n    // detect duplicates\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    // this type matches anything\n    if (t.isAnyTypeAnnotation(node)) {\n      return [node];\n    }\n\n    //\n    if (t.isFlowBaseAnnotation(node)) {\n      bases[node.type] = node;\n      continue;\n    }\n\n    //\n    if (t.isUnionTypeAnnotation(node)) {\n      if (typeGroups.indexOf(node.types) < 0) {\n        nodes = nodes.concat(node.types);\n        typeGroups.push(node.types);\n      }\n      continue;\n    }\n\n    // find a matching generic type and merge and deduplicate the type parameters\n    if (t.isGenericTypeAnnotation(node)) {\n      var name = node.id.name;\n\n      if (generics[name]) {\n        var existing = generics[name];\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics[name] = node;\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  // add back in bases\n  for (var type in bases) {\n    types.push(bases[type]);\n  }\n\n  // add back in generics\n  for (var _name in generics) {\n    types.push(generics[_name]);\n  }\n\n  return types;\n}\n\n/**\n * Create a type anotation based on typeof expression.\n */\n\nfunction createTypeAnnotationBasedOnTypeof(type) {\n  if (type === \"string\") {\n    return t.stringTypeAnnotation();\n  } else if (type === \"number\") {\n    return t.numberTypeAnnotation();\n  } else if (type === \"undefined\") {\n    return t.voidTypeAnnotation();\n  } else if (type === \"boolean\") {\n    return t.booleanTypeAnnotation();\n  } else if (type === \"function\") {\n    return t.genericTypeAnnotation(t.identifier(\"Function\"));\n  } else if (type === \"object\") {\n    return t.genericTypeAnnotation(t.identifier(\"Object\"));\n  } else if (type === \"symbol\") {\n    return t.genericTypeAnnotation(t.identifier(\"Symbol\"));\n  } else {\n    throw new Error(\"Invalid typeof value\");\n  }\n}"]}