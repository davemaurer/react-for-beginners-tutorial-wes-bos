{"version":3,"sources":["esprima-compare.js"],"names":[],"mappings":"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","file":"esprima-compare-compiled.js","sourcesContent":["// Copyright 2015 Simon Lydell\n// X11 (“MIT”) Licensed. (See LICENSE.)\n\nvar fs       = require(\"fs\")\nvar esprima  = require(\"esprima\")\nvar jsTokens = require(\"./\")\n\n\nvar typeMap = {\n  Boolean:           \"name\",\n  Identifier:        \"name\",\n  Keyword:           \"name\",\n  Null:              \"name\",\n  Numeric:           \"number\",\n  Punctuator:        \"punctuator\",\n  RegularExpression: \"regex\",\n  String:            \"string\"\n}\n\nfunction getEsprimaTokens(code) {\n  var tokens = esprima.tokenize(code, {loc: true})\n  tokens.forEach(function(token) { token.type = typeMap[token.type] })\n  return tokens\n}\n\n\nfunction jsTokensTokenize(string) {\n  jsTokens.lastIndex = 0\n  if (string === \"\") return []\n  var tokens = []\n  var match\n  while (match = jsTokens.exec(string)) {\n    tokens.push(jsTokens.matchToToken(match))\n  }\n  return tokens\n}\n\nvar exclusionMap = {\n  comment:    true,\n  whitespace: true\n}\n\nfunction getJsTokensTokens(code) {\n  return jsTokensTokenize(code)\n    .filter(function(token) { return !exclusionMap.hasOwnProperty(token.type) })\n}\n\n\nfunction compare(file) {\n  var code = fs.readFileSync(require.resolve(file)).toString()\n  var esprimaTokens  = getEsprimaTokens(code)\n  var jsTokensTokens = getJsTokensTokens(code)\n\n  var length = Math.min(esprimaTokens.length, jsTokensTokens.length)\n  for (var index = 0; index < length; index++) {\n    var esprimaToken  = esprimaTokens[index]\n    var jsTokensToken = jsTokensTokens[index]\n    if (\n      esprimaToken.type  !== jsTokensToken.type ||\n      esprimaToken.value !== jsTokensToken.value\n    ) {\n      var loc = esprimaToken.loc.start\n      console.error(\n        file + \":\" + loc.line + \":\" + (loc.column + 1) + \": \" +\n        \"(token #\" + (index + 1) + \")\\n\" +\n        \"  esprima:  '\" + esprimaToken.type  + \"': \" + esprimaToken.value + \"\\n\" +\n        \"  jsTokens: '\" + jsTokensToken.type + \"': \" + jsTokensToken.value\n      )\n      return false\n    }\n  }\n\n  if (esprimaTokens.length !== jsTokensTokens.length) {\n    console.error(\n      file + ': Number of tokens mismatch.\\n' +\n      \"  esprima:  \" + (esprimaTokens.length + 1) + \"\\n\" +\n      \"  jsTokens: \" + (jsTokensTokens.length + 1)\n    )\n    return false\n  }\n\n  return true\n}\n\n\nvar results = process.argv.slice(2).map(compare)\n\nif (results.every(Boolean)) {\n  console.log(\n    \"Comparison succeeded: esprima and jsTokens produced the same tokens!\"\n  )\n} else {\n  console.error(\"Comparison failed.\")\n}\n"]}